'use client';
import React, { useState, useEffect } from 'react';
import { useCart } from '../../store/cartContext';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import Image from 'next/image';
import Link from 'next/link';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const orderSchema = z.object({
  senderName: z.string().min(1, '–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  senderEmail: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π E-mail'),
  senderPhone: z.string()
    .min(10, '–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤')
    .regex(/^[\d+]+$/, '–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'),
  contactMethod: z.string().optional(),
  deliveryDate: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏'),
  deliveryTime: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'),
  deliveryMethod: z.string().optional(),

  recipientAddress: z.string().optional(),
  comment: z.string().optional(),
  promoCode: z.string().optional(),
  paymentMethod: z.string().optional(),
  agreeTerms: z
    .boolean()
    .refine((val) => val === true, '–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏'),
});

const CartPage = () => {
  const { cart, removeFromCart, clearCart, increaseQuantity, decreaseQuantity } = useCart();
  const [orderConfirmed, setOrderConfirmed] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedTime, setSelectedTime] = useState('');
  const [isChecked, setIsChecked] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [phone, setPhone] = useState(0);
  const [verificationStep, setVerificationStep] = useState(false);
  const [verificationCode, setVerificationCode] = useState('');
  const [generatedCode, setGeneratedCode] = useState('');

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    setValue,
  } = useForm({
    resolver: zodResolver(orderSchema),
  });

  useEffect(() => {
    setValue('deliveryDate', selectedDate.toLocaleDateString('ru-RU'));
  }, [selectedDate, setValue]);

  useEffect(() => {
    setValue('deliveryTime', selectedTime);
  }, [selectedTime, setValue]);

  useEffect(() => {
    console.log('–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã:', errors);
  }, [errors]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º cart –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const total = cart.reduce(
    (sum, product) =>
      sum +
      parseFloat(String(product.price).replace(' ‚ÇΩ', '').replace(' ', '')) *
        (product.quantity || 1),
    0
  );

  const closeModal = () => {
    setIsModalOpen(false);
    setVerificationStep(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    setVerificationCode(''); // –û—á–∏—â–∞–µ–º –∫–æ–¥
  };

  const handleClickOutside = (e) => {
    if (e.target === e.currentTarget) {
      closeModal();
    }
  };

  const handleSubmitOrder = handleSubmit(async (data) => {
    if (cart.length === 0) {
      alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }

    setIsSending(true);

    try {
      if (!verificationStep) {
        const code = Math.floor(1000 + Math.random() * 9000).toString();
        const phone = data.senderPhone.replace(/\D/g, '');
        const botUrl = `https://t.me/BerryShopAuthBot?start=${phone}_${code}`;
        window.open(botUrl, '_blank');

        setGeneratedCode(code);
        setPhone(phone);
        setVerificationStep(true);
        return;
      }

      if (verificationCode !== generatedCode) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      }

      await sendData(data);
      setOrderConfirmed(true);
      clearCart();
      reset();
      closeModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    } catch (error) {
      alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsSending(false);
    }
  });

  async function sendData(formData) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let message = `<b>üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    message += `<b>üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b>\n`;
    message += `- –ò–º—è: ${formData.senderName}\n`;
    message += `- Email: ${formData.senderEmail}\n`;
    message += `- –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.senderPhone}\n\n`;

    message += `<b>üìÖ –î–æ—Å—Ç–∞–≤–∫–∞:</b>\n`;
    message += `- –î–∞—Ç–∞: ${formData.deliveryDate}\n`;
    message += `- –í—Ä–µ–º—è: ${formData.deliveryTime}\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    message += `<b>üõí –¢–æ–≤–∞—Ä—ã:</b>\n`;
    cart.forEach((item, index) => {
      message += `${index + 1}. ${item.name} (${item.selectedOption}) - ${item.quantity} √ó ${item.price}\n`;
    });

    message += `\n<b>üí∞ –ò—Ç–æ–≥–æ: ${total} ‚ÇΩ</b>`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API
    const response = await fetch(`https://api.telegram.org/bot7969947917:AAGPqZxT7FxAmbR4HA8ntRVPTh0seL51law/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: '581497267',
        text: message,
        parse_mode: 'HTML'
      })
    });

    const data = await response.json();

    alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä')

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ Telegram API:', data);
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }

    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);

    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);

    return false;
  }
}

  const [currentTime, setCurrentTime] = useState(new Date());

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(timer);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –≤—Ä–µ–º—è
  const isTimeAvailable = (timeStr) => {
    if (!timeStr) return true;
    
    const [hours, minutes] = timeStr.split(':').map(Number);
    const optionTime = new Date();
    optionTime.setHours(hours, minutes, 0, 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º 1 —á–∞—Å (60 –º–∏–Ω—É—Ç) –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const comparisonTime = new Date(currentTime.getTime() + 60 * 60 * 1000);
    
    return optionTime > comparisonTime;
  };

  const timeOptions = [
    { value: "9:00", label: "9:00" },
    { value: "12:00", label: "12:00" },
    { value: "15:00", label: "15:00" },
    { value: "18:00", label: "18:00" }
  ];

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">–ö–æ—Ä–∑–∏–Ω–∞</h1>
      {cart.length === 0 ? (
        <p>
          –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.{' '}
          <Link href="/" className="text-blue-500">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º
          </Link>
        </p>
      ) : (
        <div>
          <ul>
            {cart.map((product, index) => (
              <li
                key={`${product.id}-${product.selectedOption}-${index}`}
                className="flex justify-between items-center py-4 border-b"
              >
                <div className="flex items-center">
                  <Image
                    src={product.image}
                    alt={product.name}
                    width={150}
                    height={250}
                    className="object-cover mx-auto rounded-md"
                  />
                  <div className='ml-5'>
                    <p className="font-semibold">{product.name}</p>
                    <p className="text-sm">{product.price}</p>
                    <p className="text-sm">{product.selectedOption}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => decreaseQuantity(product.id, product.selectedOption)}
                    className="px-2 py-1 bg-gray-200 rounded"
                  >
                    -
                  </button>
                  <span>{product.quantity}</span>
                  <button
                    onClick={() => increaseQuantity(product.id, product.selectedOption)}
                    className="px-2 py-1 bg-gray-200 rounded"
                  >
                    +
                  </button>
                  <button
                    onClick={() => removeFromCart(product.id, product.selectedOption)}
                    className="text-red-500 ml-4"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </li>
            ))}
          </ul>

          <div className="mt-6 flex justify-between items-center">
            <p className="font-semibold">–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total} ‚ÇΩ</p>
            <button
              onClick={clearCart}
              className="bg-red-500 text-white py-2 px-4 rounded-md"
            >
              –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            </button>
          </div>

          <div className="mt-4">
            <button
              onClick={() => setIsModalOpen(true)}
              className="bg-green-500 text-white py-2 px-4 rounded-md"
            >
              –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          </div>
          <div className='mt-3 flex flex-col gap-2'>
            <p className='font-bold'>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–Ω–∏–∫–∏ –∏ —É—Ä–∞—à–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.</p>
            <p className='font-bold'>–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä—É–∫—Ç–æ–≤ –≤ —à–æ–∫–æ–ª–∞–¥–µ 1 —Å—É—Ç–∫–∏.</p>
            <p className='font-bold'>–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ—Ç—Ä–µ–±–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 12 —á–∞—Å–æ–≤ –∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –æ—Ç +5 –¥–æ +10 C.</p>
            <p className='font-bold'>–ü–µ—Ä–µ–¥ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ 15 –º–∏–Ω.</p>
          </div>
        </div>
      )}

      {isModalOpen && (
        <div
          onClick={handleClickOutside}
          className="fixed inset-0 flex items-center justify-center z-50 bg-opacity-50 backdrop-blur-sm"
        >
          <div
            onClick={(e) => e.stopPropagation()}
            className="bg-white p-8 rounded-md w-full max-w-lg relative max-h-[90vh] overflow-y-auto border-black border-1"
          >
            <button
              className="absolute top-4 right-4 text-xl font-bold text-gray-500"
              onClick={closeModal}
            >
              √ó
            </button>

            <h2 className="text-2xl font-bold mb-6">
              {verificationStep ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' : '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'}
            </h2>

            <form onSubmit={handleSubmitOrder} className="space-y-4">
              {!verificationStep ? (
                <>
                <div>
                    <label>–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</label>
                    <input
                      {...register('senderName')}
                      placeholder="–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
                      className="w-full p-2 border rounded-md"
                    />
                    {errors.senderName && (
                      <p className="text-red-500">{errors.senderName.message}</p>
                    )}
                  </div>

              <div>
                <label>E-mail –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</label>
                <input
                  {...register('senderEmail')}
                  placeholder="E-mail"
                  className="w-full p-2 border rounded-md"
                />
                {errors.senderEmail && (
                  <p className="text-red-500">{errors.senderEmail.message}</p>
                )}
              </div>

              <div>
                    <label>–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</label>
                    <input
                      {...register('senderPhone')}
                      placeholder="–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
                      className="w-full p-2 border rounded-md"
                    />
                    {errors.senderPhone && (
                      <p className="text-red-500">{errors.senderPhone.message}</p>
                    )}
                  </div>

              <div>
                <label>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                <DatePicker
                  selected={selectedDate}
                  onChange={(date) => setSelectedDate(date)}
                  dateFormat="dd/MM/yyyy"
                  className="w-full p-2 border rounded-md"
                  minDate={Date.now()}
                />
              </div>

              <div>
                <label>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                <select
                  value={selectedTime}
                  onChange={(e) => setSelectedTime(e.target.value)}
                  className="w-full p-2 border rounded-md"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                  {timeOptions.map((option) => (
                    <option 
                      key={option.value}
                      value={option.value}
                      disabled={!isTimeAvailable(option.value)}
                    >
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              </>
              ) : (
                <>
                  <div>
                    <label>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</label>
                    <input
                      type="number"
                      value={verificationCode}
                      onChange={(e) => setVerificationCode(e.target.value)}
                      placeholder="–ö–æ–¥ –∏–∑ Telegram"
                      className="w-full p-2 border rounded-md"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                    </p>
                  </div>
                </>
              )}

              <div className="flex items-center space-x-2">
                <input
                  {...register('agreeTerms')}
                  type="checkbox"
                  checked={isChecked}
                  onChange={() => setIsChecked(!isChecked)}
                  className="form-checkbox"
                />
                <label>–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏*</label>
              </div>

              <div>
                <p>* –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ</p>
                <p>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä, –≥–¥–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –µ–≥–æ –æ–ø–ª–∞—Ç—ã</p>
                <p>–£—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∫–ª—É–±–Ω–∏–∫–∏ –≤ —à–æ–∫–æ–ª–∞–¥–µ 24—á</p>
              </div>

              <button
                type="submit"
                className="bg-green-500 text-white py-2 px-4 rounded-md mt-4 disabled:opacity-50"
                disabled={!isChecked || isSending}
              >
                {verificationStep
                  ? (isSending ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
                  : (isSending ? '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥')}
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default CartPage;